name: Build and Deploy to Kubernetes

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: registry.digitalocean.com/fidl-containers
  IMAGE_NAME: pids-app
  KUBERNETES_NAMESPACE: pids-production

jobs:
  test:
    name: Test and Lint
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Type check
      run: npm run type-check

    - name: Lint check
      run: npm run lint -- --max-warnings 35

  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        cache: 'npm'

    - name: Install frontend dependencies
      run: npm ci

    - name: Build frontend
      run: npm run build

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Digital Ocean Container Registry
      uses: docker/login-action@v3
      with:
        registry: registry.digitalocean.com
        username: ${{ secrets.DIGITALOCEAN_REGISTRY_USERNAME }}
        password: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

    - name: Extract metadata for frontend
      id: meta-frontend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          frontend-main
          type=sha,prefix=frontend-,format=short

    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta-frontend.outputs.tags }}
        labels: ${{ steps.meta-frontend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Extract metadata for backend
      id: meta-backend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          backend-main
          type=sha,prefix=backend-,format=short

    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./api
        file: ./api/Dockerfile
        push: true
        tags: ${{ steps.meta-backend.outputs.tags }}
        labels: ${{ steps.meta-backend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    name: Deploy to Kubernetes
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install doctl
      uses: digitalocean/action-doctl@v2
      with:
        token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

    - name: Save kubeconfig
      run: doctl kubernetes cluster kubeconfig save pids-production

    - name: Verify kubectl connection
      run: kubectl cluster-info

    - name: Ensure deployments have imagePullSecrets
      run: |
        # Apply manifest files to ensure imagePullSecrets are present
        # This is idempotent and won't change anything if already correct
        kubectl apply -f k8s/applications/frontend.yaml
        kubectl apply -f k8s/applications/api.yaml

    - name: Update frontend deployment
      run: |
        kubectl set image deployment/frontend \
          frontend=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:frontend-main \
          -n ${{ env.KUBERNETES_NAMESPACE }}
        
        kubectl annotate deployment/frontend \
          kubernetes.io/change-cause="Deploy ${{ github.sha }} by ${{ github.actor }}" \
          -n ${{ env.KUBERNETES_NAMESPACE }}

    - name: Update API deployment
      run: |
        kubectl set image deployment/pids-api \
          pids-api=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:backend-main \
          -n ${{ env.KUBERNETES_NAMESPACE }}
        
        kubectl annotate deployment/pids-api \
          kubernetes.io/change-cause="Deploy ${{ github.sha }} by ${{ github.actor }}" \
          -n ${{ env.KUBERNETES_NAMESPACE }}
        
    - name: Verify imagePullSecrets are present
      run: |
        echo "Verifying imagePullSecrets are configured..."
        if kubectl get deployment frontend -n ${{ env.KUBERNETES_NAMESPACE }} -o jsonpath='{.spec.template.spec.imagePullSecrets[0].name}' | grep -q registry-secret; then
          echo "✅ Frontend has imagePullSecrets"
        else
          echo "❌ Frontend missing imagePullSecrets!"
          exit 1
        fi
        
        if kubectl get deployment pids-api -n ${{ env.KUBERNETES_NAMESPACE }} -o jsonpath='{.spec.template.spec.imagePullSecrets[0].name}' | grep -q registry-secret; then
          echo "✅ API has imagePullSecrets"
        else
          echo "❌ API missing imagePullSecrets!"
          exit 1
        fi

    - name: Check deployment image
      run: |
        echo "Expected image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:frontend-main"
        kubectl get deployment/frontend -n ${{ env.KUBERNETES_NAMESPACE }} -o jsonpath='{.spec.template.spec.containers[0].image}'
        echo ""
        
    - name: Check pod status before rollout
      run: |
        echo "Current pods:"
        kubectl get pods -n ${{ env.KUBERNETES_NAMESPACE }} -l app=frontend -o wide
        echo ""
        echo "Checking for image pull errors..."
        kubectl get pods -n ${{ env.KUBERNETES_NAMESPACE }} -l app=frontend -o jsonpath='{range .items[*]}{.metadata.name}{"\t"}{.status.containerStatuses[0].state}{"\n"}{end}'
        
    - name: Wait for frontend rollout
      run: |
        kubectl rollout status deployment/frontend \
          -n ${{ env.KUBERNETES_NAMESPACE }} \
          --timeout=10m

    - name: Check API deployment image
      run: |
        echo "Expected image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:backend-main"
        kubectl get deployment/pids-api -n ${{ env.KUBERNETES_NAMESPACE }} -o jsonpath='{.spec.template.spec.containers[0].image}'
        echo ""
        
    - name: Wait for API rollout
      run: |
        kubectl rollout status deployment/pids-api \
          -n ${{ env.KUBERNETES_NAMESPACE }} \
          --timeout=10m

    - name: Verify deployment
      run: |
        echo "Checking pod status..."
        kubectl get pods -n ${{ env.KUBERNETES_NAMESPACE }}
        
        echo "Checking services..."
        kubectl get svc -n ${{ env.KUBERNETES_NAMESPACE }}
        
        echo "Deployment successful!"

    - name: Rollback on failure
      if: failure()
      run: |
        echo "Deployment failed, checking pod status..."
        kubectl get pods -n ${{ env.KUBERNETES_NAMESPACE }} -l app=frontend
        kubectl get pods -n ${{ env.KUBERNETES_NAMESPACE }} -l app=pids-api
        
        echo ""
        echo "Checking pod events and logs..."
        kubectl describe pod -n ${{ env.KUBERNETES_NAMESPACE }} -l app=frontend | tail -30
        kubectl logs -n ${{ env.KUBERNETES_NAMESPACE }} -l app=frontend --tail=50 || true
        
        echo ""
        echo "Rolling back..."
        kubectl rollout undo deployment/frontend -n ${{ env.KUBERNETES_NAMESPACE }} || true
        kubectl rollout undo deployment/pids-api -n ${{ env.KUBERNETES_NAMESPACE }} || true
        
        kubectl rollout status deployment/frontend -n ${{ env.KUBERNETES_NAMESPACE }} --timeout=10m || true
        kubectl rollout status deployment/pids-api -n ${{ env.KUBERNETES_NAMESPACE }} --timeout=10m || true
        
        echo "Rollback completed"
        exit 1

    - name: Send notification
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        text: |
          Deployment to Kubernetes ${{ job.status }}
          Commit: ${{ github.sha }}
          Author: ${{ github.actor }}
        webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      continue-on-error: true

