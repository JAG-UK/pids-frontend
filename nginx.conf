events {
    worker_connections 1024;
}

# Map for WebSocket connections
map $http_upgrade $connection_upgrade {
    default upgrade;
    '' close;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    # Logging
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;

    server {
        listen 80;
        server_name localhost;
        root /usr/share/nginx/html;
        index index.html;

        # Security headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header Referrer-Policy "no-referrer-when-downgrade" always;
        add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;

        # Keycloak proxy (must come before API proxy)
        # Proxies /auth/* to Keycloak at http://keycloak:8080/*
        location /auth/ {
            # Remove /auth prefix when forwarding to Keycloak
            rewrite ^/auth/(.*) /$1 break;
            proxy_pass http://keycloak:8080;
            
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Forwarded-Port $server_port;
            
            # Handle redirects - rewrite Keycloak redirects to use /auth prefix
            proxy_redirect http://$host/ /auth/;
            proxy_redirect http://keycloak:8080/ /auth/;
            proxy_redirect https://$host/ /auth/;
            
            # Buffer settings for better performance
            proxy_buffering off;
            proxy_read_timeout 90s;
            proxy_connect_timeout 90s;
            
            # WebSocket support (Keycloak may use WebSockets)
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
            
            # CORS headers for Keycloak
            add_header Access-Control-Allow-Origin * always;
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
            add_header Access-Control-Allow-Headers "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization" always;
            add_header Access-Control-Allow-Credentials "true" always;
            
            # Handle preflight requests
            if ($request_method = 'OPTIONS') {
                add_header Access-Control-Allow-Origin *;
                add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
                add_header Access-Control-Allow-Headers "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization";
                add_header Access-Control-Max-Age 1728000;
                add_header Content-Type "text/plain; charset=utf-8";
                add_header Content-Length 0;
                return 204;
            }
        }
        
        # Also handle /auth without trailing slash
        location = /auth {
            return 301 /auth/;
        }

        # API proxy (must come before static assets)
        location /api/ {
            proxy_pass http://pids-api:3000;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Handle redirects properly
            proxy_redirect off;
            proxy_intercept_errors on;
            
            # CORS headers
            add_header Access-Control-Allow-Origin *;
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
            add_header Access-Control-Allow-Headers "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization";
            
            # Handle preflight requests
            if ($request_method = 'OPTIONS') {
                add_header Access-Control-Allow-Origin *;
                add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
                add_header Access-Control-Allow-Headers "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization";
                add_header Access-Control-Max-Age 1728000;
                add_header Content-Type "text/plain; charset=utf-8";
                add_header Content-Length 0;
                return 204;
            }
        }

        # Static files proxy to MinIO (must come before static assets)
        location ^~ /public/static/ {
            proxy_pass http://minio:9000/pids-datasets/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Handle redirects properly
            proxy_redirect off;
            proxy_intercept_errors on;
            
            # Cache static files
            expires 1y;
            add_header Cache-Control "public, max-age=31536000";
            
            # CORS headers for static files
            add_header Access-Control-Allow-Origin *;
            add_header Access-Control-Allow-Methods "GET, HEAD, OPTIONS";
            add_header Access-Control-Allow-Headers "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range";
        }

        # Health check endpoint
        location /health {
            access_log off;
            add_header Content-Type application/json;
            add_header Cache-Control "no-cache, no-store, must-revalidate";
            return 200 '{"status":"healthy","timestamp":"$time_iso8601","version":"1.0.0"}';
        }

        # Cache static assets (must come after API and static proxies)
        # Only match files that are actually in the static directory, not API-served content
        location ~* \.(js|css|ico|svg)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
        }
        
        # Handle image files through the API proxy (not as static assets)
        # This allows images to be served from MinIO via the API

        # Handle React Router - serve index.html for all routes
        location / {
            try_files $uri $uri/ /index.html;
        }
    }
} 